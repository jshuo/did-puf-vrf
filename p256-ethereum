import os
import cryptography
from cryptography.hazmat.primitives.asymmetric import ec
from cryptography.hazmat.primitives import hashes
from cryptography.hazmat.backends import default_backend
import eth_utils

# Generate a private key using secp256r1
private_key = ec.generate_private_key(ec.SECP256R1(), default_backend())
private_key_bytes = private_key.private_numbers().private_value.to_bytes(32, byteorder='big')

# Derive the public key
public_key = private_key.public_key()

public_numbers = public_key.public_numbers()
x = public_numbers.x
y = public_numbers.y

# Compressed key starts with 0x02 if y is even, 0x03 if odd
prefix = b'\x02' if y % 2 == 0 else b'\x03'
compressed_public_key_bytes = prefix + x.to_bytes(32, byteorder='big')

# Serialize the public key to bytes
public_key_bytes = public_key.public_bytes(
    encoding=cryptography.hazmat.primitives.serialization.Encoding.X962,
    format=cryptography.hazmat.primitives.serialization.PublicFormat.UncompressedPoint
)[1:]  # Remove the 0x04 prefix

# Generate the Ethereum address from the public key
eth_address = eth_utils.to_checksum_address(eth_utils.keccak(public_key_bytes)[-20:])

# Create the wallet
wallet = {
    "address": eth_address,
    "public_key": compressed_public_key_bytes.hex(),
    "private_key": private_key_bytes.hex()
}

print(wallet)